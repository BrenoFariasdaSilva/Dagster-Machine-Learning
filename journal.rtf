{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 AndaleMono;
\f3\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red47\green255\blue18;\red0\green0\blue0;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c15686\c99608\c7843;\csgray\c0\c90000;\cssrgb\c0\c0\c0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Create repo dagraytorcker on GitHub\
Create repo dagraytorcker locally with snailgit\
Clone GitHub repo  in local dagraytorcker\
\
#create environment with pipenv from https://docs.python-guide.org/dev/virtualenvs/\
pip3 install pipenv #manages dependencies on a per-project basis\
#to enable pipenv in the shell\
python3 -m site --user-base (\'97> /Users/urdoom/Library/Python/3.9 + /bin)activate\
Add 
\f1\b export PATH="$PATH:/Users/urdoom/Library/Python/3.9/bin
\f0\b0 " to 
\f1\b .zprofile 
\f0\b0 (might need to create it)\
Restart terminal\
cd dagraytorcker\

\f1\b pipenv install requests
\f0\b0  #just an example, it create a
\f1\b  Pipfile
\f0\b0  in the project\'92s directory. The Pipfile is used to track which dependencies the project needs in case you need to re-install them, such as when you share your project with others.\
\

\f1\b pipenv run python3 main.py
\f0\b0  #Using \'91$ pipenv run\'92 ensures that your installed packages are available to your script. It\'92s also possible to spawn a new shell that ensures all commands have access to your installed packages with $
\f1\b  pipenv shell
\f0\b0  
\f2 \cf2 \cb3 \CocoaLigature0 (dagraytorcker) user %
\f0 \cf0 \cb1 \CocoaLigature1 \
($ 
\f1\b deactivate
\f0\b0  , to exit the pipenv environment, you also need to restart the terminal before re-launching \'91pipenv shell\'92)\
\
#to commit and push on GitHub\
Right-clic dagraytorcker folder \'97> Git commit \'97> push\
\
#adding config to dagit\
python3 -m dagit -f script.py \'97> go to Playground\
Drag and drop the config.yaml or ever config manually\
At the bottom right \'97> clic on Launch Execution\
On the left margin, under pipelines & Solids \'97> select a pipeline\
Then clic the \'91reload\'92 icon under \'91repository\'92\
NOTE: a solid only take one argument, besides \'91context\'92, adding a second one, e.g. arg2 in \'85\
\'85(context, arg1, arg2) willl result in a error in Dagit, it will ask to add a configuration \
\
#getting details on runs\
Go to Runs and clic on an id, e.g. 638ea92d\
At the top you can the time that a solid took to complete\
Clicking on one of them will display all its process\
At the first row, under 
\f1\b INFO
\f0\b0 , clic on \'91step_logs\'92 to get info on each step of the solid\
\
#homebrew\
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"\
brew install python@3.7\
Added aliases: py37, pip37 and activate in .zprofile\
pip37 install pipenv\
pip37 install virtualenv\
py37 -m venv venvpy37\
activate\
pipenv install pandas\
\
#tests\
python3 -m pytest\
\
#using vscode ui to run tests\
Go to Settings:\
\'97> "python.testing.pytestPath": "pytest", (the path for the tests)\
\'97> "python.testing.pytestEnabled": true\
Create a folder named pytest\
Add context.py, script_test.py, config_dagit.py\
In script_test.py, add -> from context import script and from script import *\
Clic on the Test icon on the left sidebar and you can run your tests under the PYTHON section\
Test_Explorer fail -> error ROOT DIR: within the project folder, open .vscode -> settings.json and add \'93python.testing.pytestArgs": ["./pytest\'94] #pytest being the name of the test folder\
\
Note: \
-the section TEST EXPLORER can be used if you install the package \'93Python Test Explorer for Visual Studio Code\'94\
-with this package you can have test features directly embedded into the test file, i.e. \
\'97> \'93Run Test | Debug Test | Run | Debug | Show in Test Explorer <\'97\
-You can directly run and debug tests by clicking on one of these features inside the test file\
-If they don\'92t show up, clic the reload icon in Test->TEST EXPLORER, they should appear in the test file now.\
\
#nice extensions to have\
\'93arepl\'94 is an extension that automatically checks your code in the background and displays it without you having to execute your script in the terminal or press Run.\
Clic the little red cat icon at the top of vscode to launch arepl.\
-by default, it will check after a delay specified in the AREPL.delay setting but if you want it to check just when you save, you can change the setting "AREPL.whenToExecute" to \'93onSave\'94 instead of \
\'93afterDelay\'94.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3 \cf4 \expnd0\expndtw0\kerning0
\
}